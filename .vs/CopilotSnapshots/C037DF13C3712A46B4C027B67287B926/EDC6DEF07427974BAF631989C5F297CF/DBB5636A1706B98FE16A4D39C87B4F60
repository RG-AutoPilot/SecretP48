using Microsoft.VisualStudio.Debugger.Interop;
using Microsoft.VisualStudio.Package;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using Tomlyn;
using WinForms = System.Windows.Forms;
using System.Diagnostics;

namespace FlywayProject
{
    public partial class FlywayView : UserControl
    {
        private static readonly string LogFilePath = @"C:\\Users\\Huxley.Kendell\\Source\\Repos\\SecretP48\\Logs\\FlywayTool.log";

        private static void Log(string message)
        {
            try
            {
                var logDir = Path.GetDirectoryName(LogFilePath);
                if (!Directory.Exists(logDir))
                    Directory.CreateDirectory(logDir);
                File.AppendAllText(LogFilePath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}\r\n");
            }
            catch { /* ignore logging errors */ }
        }

        private string flywayConfigPath;

        public FlywayView()
        {
            InitializeComponent();
        }

        public class FlywayDiffItem
        {
            public string Id { get; set; }
            public string Description { get; set; }

            public override string ToString() => Description;
        }

        public class FlywayMigrationItem
        {
            public bool IsSelected { get; set; }
            public string Category { get; set; }
            public string Version { get; set; }
            public string Description { get; set; }
            public string State { get; set; }
        }


        private void OnLoadMigrationsClicked(object sender, RoutedEventArgs e)
        {
            string flywayDir = Path.GetDirectoryName(flywayConfigPath);
            string selectedEnv = MigrationsEnvComboBox.SelectedItem?.ToString()?.Trim();

            if (string.IsNullOrWhiteSpace(selectedEnv))
            {
                MessageBox.Show("Please select a target environment.");
                return;
            }

            MigrationsStatusBlock.Text = "";

            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = $"/c flyway info -environment=\"{selectedEnv}\" -outputType=json -workingDirectory=\"{flywayDir}\"",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                var process = Process.Start(psi);
                string output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();

                JObject parsed = JObject.Parse(output);
                JArray migrations = parsed["migrations"] as JArray;

                var migrationList = new List<FlywayMigrationItem>();

                foreach (var mig in migrations)
                {
                    var item = new FlywayMigrationItem
                    {
                        IsSelected = mig["state"] != null && mig["state"].ToString() == "Pending",
                        Category = mig["category"]?.ToString(),
                        Version = mig["version"]?.ToString(),
                        Description = mig["description"]?.ToString(),
                        State = mig["state"]?.ToString()
                    };

                    migrationList.Add(item);
                }

                MigrationsDataGrid.ItemsSource = migrationList;
                MigrationsStatusBlock.Text = $"✅ Loaded {migrationList.Count} migrations.";
                MigrationsStatusBlock.Foreground = Brushes.DarkGreen;

                // Show/hide empty state message
                if (MigrationsEmptyBlock != null)
                {
                    MigrationsEmptyBlock.Visibility = (migrationList.Count == 0) ? Visibility.Visible : Visibility.Collapsed;
                }
            }
            catch (Exception ex)
            {
                MigrationsStatusBlock.Text = $"❌ Failed to load migrations: {ex.Message}";
                MigrationsStatusBlock.Foreground = Brushes.DarkRed;
                if (MigrationsEmptyBlock != null)
                    MigrationsEmptyBlock.Visibility = Visibility.Visible;
            }
        }

        private void OnRunCherryPickClicked(object sender, RoutedEventArgs e)
        {
            string flywayDir = Path.GetDirectoryName(flywayConfigPath);
            string selectedEnv = MigrationsEnvComboBox.SelectedItem?.ToString()?.Trim();

            if (string.IsNullOrWhiteSpace(selectedEnv))
            {
                MigrationsStatusBlock.Text = "❌ Please select an environment.";
                MigrationsStatusBlock.Foreground = Brushes.DarkRed;
                return;
            }

            var cherryPicks = new List<string>();
            foreach (var item in MigrationsDataGrid.Items)
            {
                var row = item as FlywayMigrationItem;
                if (row != null && row.IsSelected && !string.IsNullOrWhiteSpace(row.Version))
                {
                    cherryPicks.Add(row.Version);
                }
            }

            if (cherryPicks.Count == 0)
            {
                MigrationsStatusBlock.Text = "❌ No migrations selected.";
                MigrationsStatusBlock.Foreground = Brushes.DarkRed;
                return;
            }

            string cherryPickArg = string.Join(",", cherryPicks);
            string additional = MigrationsAdditionalParamsTextBox.Text.Trim();
            string selectedAction = (MigrationActionComboBox.SelectedItem as ComboBoxItem)?.Content?.ToString()?.ToLowerInvariant() ?? "migrate";
            string args = $"{selectedAction} -cherryPick=\"{cherryPickArg}\" -environment=\"{selectedEnv}\" -workingDirectory=\"{flywayDir}\" {additional}";

            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = $"/c flyway {args}",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                var process = Process.Start(psi);
                string output = process.StandardOutput.ReadToEnd();
                string error = process.StandardError.ReadToEnd();
                process.WaitForExit();

                if (!string.IsNullOrWhiteSpace(error))
                {
                    MigrationsStatusBlock.Text = $"❌ Flyway error:\n{error}";
                    MigrationsStatusBlock.Foreground = Brushes.DarkRed;
                }
                else
                {
                    var cleanedOutput = string.Join("\n",
                        output.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                              .Where(line => !line.StartsWith("Flyway ") &&
                                             !line.StartsWith("See release notes") &&
                                             !line.StartsWith("https://")));

                    MigrationsStatusBlock.Text = $"✅ Migrations applied:\n{cleanedOutput}";
                    MigrationsStatusBlock.Foreground = Brushes.DarkGreen;
                }
            }
            catch (Exception ex)
            {
                MigrationsStatusBlock.Text = $"❌ Failed to run Flyway migrate:\n{ex.Message}";
                MigrationsStatusBlock.Foreground = Brushes.DarkRed;
            }
        }


        private void RunStep(string scriptName, string extraArgs = "")
        {
            string stepsFolder = Path.Combine("C:\\Users\\Huxley.Kendell\\Source\\Repos\\SecretP48\\FlywayProject\\tdmAP", "Steps", "Windows");
            string scriptPath = Path.Combine(stepsFolder, scriptName);

            if (!File.Exists(scriptPath))
            {
                MessageBox.Show($"Script not found: {scriptPath}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            string args = $"{GetSqlArgs()} {extraArgs}".Trim();
            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "pwsh.exe",
                    Arguments = $"-NoExit -ExecutionPolicy Bypass -File \"{scriptPath}\" {args}".Trim(),
                    UseShellExecute = true,
                    WorkingDirectory = Path.GetDirectoryName(scriptPath)
                };

                Process.Start(psi);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to run script:\n{ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OnBrowseFlywayConfigClicked(object sender, RoutedEventArgs e)
        {
            var dialog = new WinForms.FolderBrowserDialog
            {
                Description = "Select your Flyway project folder"
            };

            if (dialog.ShowDialog() == WinForms.DialogResult.OK)
            {
                FlywayConfigFileTextBox.Text = dialog.SelectedPath;
            }
        }

        private void OnConfirmFlywayConfigClicked(object sender, RoutedEventArgs e)
        {
            var folderPath = FlywayConfigFileTextBox.Text.Trim();
            var configPath = Path.Combine(folderPath, "flyway.toml");

            if (!Directory.Exists(folderPath) || !File.Exists(configPath))
            {
                MessageBox.Show("flyway.toml not found in that folder.", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            flywayConfigPath = configPath;

            try
            {


                string tomlText = File.ReadAllText(configPath);
                var model = Toml.Parse(tomlText).ToModel();

                if (model is IDictionary<string, object> root &&
                    root.TryGetValue("environments", out var envsRaw) &&
                    envsRaw is IDictionary<string, object> environments)
                {
                    FlywaySourceEnvComboBox.Items.Clear();
                    FlywayTargetEnvComboBox.Items.Clear();
                    FlywaySourceEnvComboBoxTwo.Items.Clear();
                    ReportEnvironmentComboBox.Items.Clear();
                    MigrationsEnvComboBox.Items.Clear();


                    foreach (var env in environments.Keys)
                    {
                        FlywaySourceEnvComboBox.Items.Add(env);
                        FlywayTargetEnvComboBox.Items.Add(env);
                        FlywaySourceEnvComboBoxTwo.Items.Add(env);
                        ReportEnvironmentComboBox.Items.Add(env);
                        MigrationsEnvComboBox.Items.Add(env);
                    }

                    if (FlywaySourceEnvComboBox.Items.Count > 0)
                        FlywaySourceEnvComboBox.SelectedIndex = 0;
                    if (FlywayTargetEnvComboBox.Items.Count > 0)
                        FlywayTargetEnvComboBox.SelectedIndex = 0;
                    if (FlywaySourceEnvComboBoxTwo.Items.Count > 0)
                        FlywaySourceEnvComboBoxTwo.SelectedIndex = 0;
                    if (ReportEnvironmentComboBox.Items.Count > 0)
                        ReportEnvironmentComboBox.SelectedIndex = 0;
                    if (MigrationsEnvComboBox.Items.Count > 0)
                        MigrationsEnvComboBox.SelectedIndex = 0;
                }
                FlywaySourceEnvComboBox.Items.Add("schemaModel");
                FlywaySourceEnvComboBoxTwo.Items.Add("schemaModel");

                MessageBox.Show("Flyway config confirmed and environments loaded.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to parse flyway.toml:\n{ex.Message}", "Parse Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            string flywayProjectFolder = Path.GetDirectoryName(flywayConfigPath);
            string migrationsFolder = Path.Combine(flywayProjectFolder, "migrations");

            bool hasMigrationsFolder = Directory.Exists(migrationsFolder);

            // Disable tabs if missing
            GenerateMigrationsTab.IsEnabled = hasMigrationsFolder;
            MigrationsTab.IsEnabled = hasMigrationsFolder;

        }

        private async void OnTestConnectionClicked(object sender, RoutedEventArgs e)
        {
            TestConnectionStatusBlock.Text = "Testing connection...";
            TestConnectionStatusBlock.Foreground = Brushes.Black;
            await Task.Run(() =>
            {
                string stepsFolder = Path.Combine("C:\\Users\\Huxley.Kendell\\Source\\Repos\\SecretP48\\FlywayProject\\tdmAP", "Steps", "Windows");
                string scriptPath = Path.Combine(stepsFolder, "03a_Create-ConnectionStrings.ps1");
                if (!File.Exists(scriptPath))
                {
                    Dispatcher.Invoke(() => {
                        TestConnectionStatusBlock.Text = $"Script not found: {scriptPath}";
                        TestConnectionStatusBlock.Foreground = Brushes.DarkRed;
                    });
                    Log($"Test Connection: Script not found: {scriptPath}");
                    return;
                }
                try
                {
                    var psi = new ProcessStartInfo
                    {
                        FileName = "pwsh.exe",
                        Arguments = $"-ExecutionPolicy Bypass -File \"{scriptPath}\"",
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    };
                    using (var process = Process.Start(psi))
                    {
                        string output = process.StandardOutput.ReadToEnd();
                        string error = process.StandardError.ReadToEnd();
                        process.WaitForExit();
                        string result = !string.IsNullOrWhiteSpace(error) ? error : output;
                        Dispatcher.Invoke(() => {
                            TestConnectionStatusBlock.Text = result;
                            TestConnectionStatusBlock.Foreground = string.IsNullOrWhiteSpace(error) ? Brushes.DarkGreen : Brushes.DarkRed;
                        });
                        Log($"Test Connection Output: {result}");
                    }
                }
                catch (Exception ex)
                {
                    Dispatcher.Invoke(() => {
                        TestConnectionStatusBlock.Text = $"Failed to run script: {ex.Message}";
                        TestConnectionStatusBlock.Foreground = Brushes.DarkRed;
                    });
                    Log($"Test Connection Exception: {ex.Message}");
                }
            });
        }

        private void OnInstallFlywayClisClicked(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Install Flyway CLI not implemented.");
        }

        private void OnInstallDbatoolsClicked(object sender, RoutedEventArgs e)
        {
            try
            {
                var script = "if (-not (Get-Command Set-DbatoolsConfig -ErrorAction SilentlyContinue)) { " +
                             "Install-Module dbatools -Scope CurrentUser -Force } " +
                             "else { Write-Host 'dbatools already installed.' }";

                Process.Start(new ProcessStartInfo
                {
                    FileName = "powershell.exe",
                    Arguments = $"-NoExit -ExecutionPolicy Bypass -Command \"{script}\"",
                    UseShellExecute = true
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to install dbatools: {ex.Message}");
            }
        }

        private void OnAuthenticateFWClicked(object sender, RoutedEventArgs e)
        {
           
        string arguments = $"auth -IAgreeToTheEula";

            try
            {
                Process.Start(new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = $"/k flyway {arguments}",
                    UseShellExecute = true
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to Auth Flyway:\n{ex.Message}");
            }
        }

        private void OnCaptureClicked(object sender, RoutedEventArgs e)
        {
            string flywayDir = Path.GetDirectoryName(flywayConfigPath);
            string sourceEnv = FlywaySourceEnvComboBoxTwo.SelectedItem?.ToString()?.Trim();

            if (string.IsNullOrWhiteSpace(flywayDir) || string.IsNullOrWhiteSpace(sourceEnv))
            {
                MessageBox.Show("Please select a source environment.");
                return;
            }

            string modelPath = Path.Combine(flywayDir, "schema-model");
            string configPath = flywayConfigPath;

            string arguments =
                $"'-diff.source={sourceEnv}' '-diff.target=schemaModel' -configFiles='{configPath}' -schemaModelLocation='{modelPath}\' -outputType=json diff";

            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "pwsh.exe",
                    Arguments = $"-ExecutionPolicy Bypass -Command \"flyway {arguments}\"",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (var process = Process.Start(psi))
                using (var reader = process.StandardOutput)
                {
                    string output = reader.ReadToEnd();
                    process.WaitForExit();

                    if (string.IsNullOrWhiteSpace(output))
                    {
                        CaptureStatusBlock.Text = "❌ No output received from Flyway.";
                        CaptureStatusBlock.Foreground = Brushes.DarkRed;
                        return;
                    }

                    JObject result = JObject.Parse(output);
                    JArray differences = (JArray)result["differences"];
                    SchemaChangesListBox.Items.Clear();

                    if (differences == null || differences.Count == 0)
                    {
                        CaptureStatusBlock.Text = "✅ No differences found.";
                        CaptureStatusBlock.Foreground = Brushes.DarkGreen;
                        return;
                    }

                    for (int i = 0; i < differences.Count; i++)
                    {
                        var diff = differences[i];
                        string id = diff["id"]?.ToString();
                        string type = diff["differenceType"]?.ToString();
                        string objType = diff["objectType"]?.ToString();
                        string name = diff["from"]?["name"]?.ToString() ?? diff["to"]?["name"]?.ToString() ?? "(unknown)";

                        if (!string.IsNullOrWhiteSpace(id))
                        {
                            SchemaChangesListBox.Items.Add(new FlywayDiffItem
                            {
                                Id = id,
                                Description = $"Change {i}: {type} {objType} {name}"
                            });
                        }
                    }

                    CaptureStatusBlock.Text = $"✅ Found {SchemaChangesListBox.Items.Count} changes.";
                    CaptureStatusBlock.Foreground = Brushes.DarkGreen;
                }
            }
            catch (Exception ex)
            {
                CaptureStatusBlock.Text = $"❌ Failed to run diff preview:\n{ex.Message}";
                CaptureStatusBlock.Foreground = Brushes.DarkRed;
            }
        }


        private void OnCaptureSelectedClicked(object sender, RoutedEventArgs e)
        {
            string flywayDir = Path.GetDirectoryName(flywayConfigPath);
            string modelPath = Path.Combine(flywayDir, "schema-model");
            string configPath = flywayConfigPath;

            if (string.IsNullOrWhiteSpace(flywayDir) || string.IsNullOrWhiteSpace(configPath))
            {
                CaptureStatusBlock.Text = "❌ Flyway config or model path is not set.";
                CaptureStatusBlock.Foreground = Brushes.DarkRed;
                return;
            }

            CaptureStatusBlock.Text = ""; // ✅ Clear old feedback

            var selectedIds = new List<string>();

            foreach (var item in SchemaChangesListBox.Items)
            {
                var container = (ListBoxItem)SchemaChangesListBox.ItemContainerGenerator.ContainerFromItem(item);
                if (container == null)
                {
                    SchemaChangesListBox.UpdateLayout();
                    SchemaChangesListBox.ScrollIntoView(item);
                    container = (ListBoxItem)SchemaChangesListBox.ItemContainerGenerator.ContainerFromItem(item);
                }

                var checkbox = FindVisualChild<CheckBox>(container);
                if (checkbox?.IsChecked == true && item is FlywayDiffItem diffItem)
                {
                    selectedIds.Add(diffItem.Id);
                }
            }

            if (selectedIds.Count == 0)
            {
                CaptureStatusBlock.Text = "❌ Please select at least one change.";
                CaptureStatusBlock.Foreground = Brushes.DarkRed;
                return;
            }

            string idArg = string.Join(",", selectedIds.Select(s => s.Trim()));
            string args = $"model \"-changes={idArg}\" -workingDirectory=\"{flywayDir}\"";

            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = $"/c flyway {args}",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                var process = Process.Start(psi);
                string output = process.StandardOutput.ReadToEnd();
                string error = process.StandardError.ReadToEnd();
                process.WaitForExit();

                if (!string.IsNullOrWhiteSpace(error))
                {
                    CaptureStatusBlock.Text = $"❌ Flyway returned an error:\n{error}";
                    CaptureStatusBlock.Foreground = Brushes.DarkRed;
                }
                else
                {
                    // ✅ Strip out branding/header lines
                    var cleanedOutput = string.Join("\n",
                        output.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                              .Where(line => !line.StartsWith("Flyway ") &&
                                             !line.StartsWith("See release notes") &&
                                             !line.StartsWith("https://")));

                    CaptureStatusBlock.Text = $"✅ Model captured:\n{cleanedOutput}";
                    CaptureStatusBlock.Foreground = Brushes.DarkGreen;

                    SchemaChangesListBox.Items.Clear(); // ✅ Clear captured list
                }
            }
            catch (Exception ex)
            {
                CaptureStatusBlock.Text = $"❌ Failed to run Flyway model:\n{ex.Message}";
                CaptureStatusBlock.Foreground = Brushes.DarkRed;
            }
        }


        private static T FindVisualChild<T>(DependencyObject parent) where T : DependencyObject
        {
            if (parent == null) return null;
            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(parent); i++)
            {
                var child = VisualTreeHelper.GetChild(parent, i);
                if (child is T match)
                    return match;

                var result = FindVisualChild<T>(child);
                if (result != null)
                    return result;
            }
            return null;
        }

        private void OnGeneratePreviewClicked(object sender, RoutedEventArgs e)
        {
            string flywayDir = Path.GetDirectoryName(flywayConfigPath);
            string sourceEnv = "schemaModel";  // hardcoded
            string modelPath = Path.Combine(flywayDir, "schema-model");
            string configPath = flywayConfigPath;

            string arguments =
                $"'-diff.source=schemaModel' '-diff.target=migrations' '-diff.buildEnvironment=shadow' -workingDirectory=\"{flywayDir}\" -outputType=json diff";

            Log("Generate Preview: Started");
            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "pwsh.exe",
                    Arguments = $"-ExecutionPolicy Bypass -Command \"flyway {arguments}\"",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (var process = Process.Start(psi))
                using (var reader = process.StandardOutput)
                {
                    string output = reader.ReadToEnd();
                    process.WaitForExit();

                    if (string.IsNullOrWhiteSpace(output))
                    {
                        GenerateStatusBlock.Text = "❌ No output received from Flyway.";
                        GenerateStatusBlock.Foreground = Brushes.DarkRed;
                        return;
                    }

                    JObject result = JObject.Parse(output);
                    JArray differences = (JArray)result["differences"];
                    MigrationChangesListBox.Items.Clear();

                    if (differences == null || differences.Count == 0)
                    {
                        GenerateStatusBlock.Text = "✅ No differences found.";
                        GenerateStatusBlock.Foreground = Brushes.DarkGreen;
                        return;
                    }

                    for (int i = 0; i < differences.Count; i++)
                    {
                        var diff = differences[i];
                        string id = diff["id"]?.ToString();
                        string type = diff["differenceType"]?.ToString();
                        string objType = diff["objectType"]?.ToString();
                        string name = diff["from"]?["name"]?.ToString() ?? diff["to"]?["name"]?.ToString() ?? "(unknown)";

                        if (!string.IsNullOrWhiteSpace(id))
                        {
                            MigrationChangesListBox.Items.Add(new FlywayDiffItem
                            {
                                Id = id,
                                Description = $"Change {i}: {type} {objType} {name}"
                            });
                        }
                    }

                    GenerateStatusBlock.Text = $"✅ Found {MigrationChangesListBox.Items.Count} changes.";
                    GenerateStatusBlock.Foreground = Brushes.DarkGreen;
                    Log($"Generate Preview Output: Found {MigrationChangesListBox.Items.Count} changes.");
                }
            }
            catch (Exception ex)
            {
                GenerateStatusBlock.Text = $"❌ Failed to run diff preview:\n{ex.Message}";
                GenerateStatusBlock.Foreground = Brushes.DarkRed;
                Log($"Generate Preview Exception: {ex.Message}");
            }
        }

        private string GetSqlArgs()
        {
            // Your logic to construct SQL arguments
            return "";
        }

        private void OnLogoClick(object sender, RoutedEventArgs e)
        {
            // TODO: Implement logo click action if needed
        }

        private void OnGenerateMigrationClicked(object sender, RoutedEventArgs e)
        {
            // TODO: Implement generate migration action if needed
        }

        private void OnDeployClicked(object sender, RoutedEventArgs e)
        {
            // TODO: Implement deploy action if needed
        }

        private void OnGenerateReportClicked(object sender, RoutedEventArgs e)
        {
            // TODO: Implement generate report action if needed
        }
    }
}
